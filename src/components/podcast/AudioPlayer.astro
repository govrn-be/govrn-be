---
interface Props {
  title: string;
  audioUrl: string;
  spotifyUrl: string;
}

const { title, audioUrl, spotifyUrl } = Astro.props;
---

<div class="fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 shadow-lg z-50" data-audio-url={audioUrl}>
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="py-4 flex items-center justify-between">
      <div class="flex items-center space-x-4">
        <button
          id="playPauseBtn"
          class="w-12 h-12 rounded-full bg-primary text-white flex items-center justify-center hover:bg-primary/90 transition-colors"
          aria-label="Play/Pause"
        >
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" id="playIcon">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          <svg class="w-6 h-6 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24" id="pauseIcon">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 9v6m4-6v6m7-3a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
        </button>
        <div>
          <p class="font-medium text-gray-900 truncate max-w-[150px] sm:max-w-[300px]">{title}</p>
          <div class="flex items-center space-x-2 text-sm text-gray-500">
            <span id="currentTime">0:00</span>
            <span>/</span>
            <span id="duration">0:00</span>
          </div>
        </div>
      </div>

      <div class="flex-grow mx-8">
        <div class="relative w-full h-2 bg-gray-200 rounded-full">
          <div id="progressBar" class="absolute left-0 top-0 h-full bg-primary rounded-full" style="width: 0%"></div>
          <input 
            type="range" 
            id="seekBar" 
            class="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
            min="0" 
            max="100" 
            value="0"
          />
        </div>
      </div>

      <div class="flex items-center space-x-4">
        <button
          id="volumeBtn"
          class="p-2 text-gray-500 hover:text-gray-700 transition-colors"
          aria-label="Volume"
        >
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" id="volumeIcon">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.536 8.464a5 5 0 010 7.072M18.364 5.636a9 9 0 010 12.728M12 8v8M8.5 8.5L11 6v12l-2.5-2.5h-2a1 1 0 01-1-1v-5a1 1 0 011-1h2z" />
          </svg>
          <svg class="w-6 h-6 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24" id="muteIcon">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5.586 15H4a1 1 0 01-1-1v-4a1 1 0 011-1h1.586l4.707-4.707C10.923 3.663 12 4.109 12 5v14c0 .891-1.077 1.337-1.707.707L5.586 15z" />
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2" />
          </svg>
        </button>
       
      </div>
    </div>
  </div>
</div>

<script>
  const playPauseBtn = document.getElementById('playPauseBtn');
  const playIcon = document.getElementById('playIcon');
  const pauseIcon = document.getElementById('pauseIcon');
  const progressBar = document.getElementById('progressBar');
  const seekBar = document.getElementById('seekBar') as HTMLInputElement;
  const currentTimeEl = document.getElementById('currentTime');
  const durationEl = document.getElementById('duration');
  const volumeBtn = document.getElementById('volumeBtn');

  let audio: HTMLAudioElement | null = null;
  let isPlaying = false;

  function formatTime(seconds: number): string {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = Math.floor(seconds % 60);
    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
  }

  function togglePlayPause() {
    if (!audio) {
      // Initialize audio with the provided audioUrl
      const audioPlayer = document.querySelector('div[data-audio-url]');
      const audioUrl = audioPlayer?.getAttribute('data-audio-url');
      audio = new Audio(audioUrl);
      audio.addEventListener('timeupdate', updateProgress);
      audio.addEventListener('loadedmetadata', () => {
        if (durationEl) durationEl.textContent = formatTime(audio!.duration);
      });
    }

    if (isPlaying) {
      audio.pause();
      playIcon?.classList.remove('hidden');
      pauseIcon?.classList.add('hidden');
    } else {
      audio.play();
      playIcon?.classList.add('hidden');
      pauseIcon?.classList.remove('hidden');
    }
    isPlaying = !isPlaying;
  }

  function updateProgress() {
    if (!audio) return;
    
    const progress = (audio.currentTime / audio.duration) * 100;
    if (progressBar) progressBar.style.width = `${progress}%`;
    if (seekBar) seekBar.value = progress.toString();
    if (currentTimeEl) currentTimeEl.textContent = formatTime(audio.currentTime);
  }

  function seek() {
    if (!audio || !seekBar) return;
    const time = (parseFloat(seekBar.value) / 100) * audio.duration;
    audio.currentTime = time;
  }

  playPauseBtn?.addEventListener('click', togglePlayPause);
  seekBar?.addEventListener('input', seek);
  volumeBtn?.addEventListener('click', () => {
    if (!audio) return;
    audio.muted = !audio.muted;
    volumeBtn.classList.toggle('text-primary');
    document.getElementById('volumeIcon')?.classList.toggle('hidden');
    document.getElementById('muteIcon')?.classList.toggle('hidden');
  });
</script>

<style>
  input[type="range"] {
    -webkit-appearance: none;
    appearance: none;
    background: transparent;
  }

  input[type="range"]::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 16px;
    height: 16px;
    background: var(--tw-prose-links);
    border-radius: 50%;
    cursor: pointer;
    margin-top: -7px;
  }

  input[type="range"]::-moz-range-thumb {
    width: 16px;
    height: 16px;
    background: var(--tw-prose-links);
    border-radius: 50%;
    cursor: pointer;
  }
</style>
