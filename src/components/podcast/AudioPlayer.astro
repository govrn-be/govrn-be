---
interface Props {
  title: string;
  audioUrl: string;
  spotifyUrl: string;
}

const { title, audioUrl, spotifyUrl } = Astro.props;
---

<div class="fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 shadow-lg z-50" data-audio-url={audioUrl}>
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="py-4 flex items-center justify-between">
      <div class="flex items-center space-x-4">
        <button
          id="playPauseBtn"
          class="w-12 h-12 rounded-full bg-primary text-white flex items-center justify-center hover:bg-primary/90 transition-colors"
          aria-label="Play/Pause"
        >
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" id="playIcon">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          <svg class="w-6 h-6 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24" id="pauseIcon">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 9v6m4-6v6m7-3a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
        </button>
        <div>
          <p class="font-medium text-gray-900">{title}</p>
          <div class="flex items-center space-x-2 text-sm text-gray-500">
            <span id="currentTime">0:00</span>
            <span>/</span>
            <span id="duration">0:00</span>
          </div>
        </div>
      </div>

      <div class="flex-grow mx-8">
        <div class="relative w-full h-2 bg-gray-200 rounded-full">
          <div id="progressBar" class="absolute left-0 top-0 h-full bg-primary rounded-full" style="width: 0%"></div>
          <input 
            type="range" 
            id="seekBar" 
            class="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
            min="0" 
            max="100" 
            value="0"
          />
        </div>
      </div>

      <div class="flex items-center space-x-4">
        <button
          id="volumeBtn"
          class="p-2 text-gray-500 hover:text-gray-700 transition-colors"
          aria-label="Volume"
        >
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.536 8.464a5 5 0 010 7.072M12 8v8m-3.536-7.536a5 5 0 000 7.072M9.9 6.1l1.414 1.414M14.828 11H19" />
          </svg>
        </button>
        <a
          href={spotifyUrl}
          target="_blank"
          rel="noopener noreferrer"
          class="inline-flex items-center px-4 py-2 text-sm font-medium rounded-lg text-white bg-[#1DB954] hover:bg-[#1DB954]/90 transition-colors duration-200"
        >
          <svg class="w-4 h-4 mr-2" viewBox="0 0 24 24" fill="currentColor">
            <path d="M12 0C5.4 0 0 5.4 0 12s5.4 12 12 12 12-5.4 12-12S18.66 0 12 0zm5.521 17.34c-.24.359-.66.48-1.021.24-2.82-1.74-6.36-2.101-10.561-1.141-.418.122-.779-.179-.899-.539-.12-.421.18-.78.54-.9 4.56-1.021 8.52-.6 11.64 1.32.42.18.479.659.301 1.02zm1.44-3.3c-.301.42-.841.6-1.262.3-3.239-1.98-8.159-2.58-11.939-1.38-.479.12-1.02-.12-1.14-.6-.12-.48.12-1.021.6-1.141C9.6 9.9 15 10.561 18.72 12.84c.361.181.54.78.241 1.2zm.12-3.36C15.24 8.4 8.82 8.16 5.16 9.301c-.6.179-1.2-.181-1.38-.721-.18-.601.18-1.2.72-1.381 4.26-1.26 11.28-1.02 15.721 1.621.539.3.719 1.02.419 1.56-.299.421-1.02.599-1.559.3z"/>
          </svg>
          Open in Spotify
        </a>
      </div>
    </div>
  </div>
</div>

<script>
  const playPauseBtn = document.getElementById('playPauseBtn');
  const playIcon = document.getElementById('playIcon');
  const pauseIcon = document.getElementById('pauseIcon');
  const progressBar = document.getElementById('progressBar');
  const seekBar = document.getElementById('seekBar') as HTMLInputElement;
  const currentTimeEl = document.getElementById('currentTime');
  const durationEl = document.getElementById('duration');
  const volumeBtn = document.getElementById('volumeBtn');

  let audio: HTMLAudioElement | null = null;
  let isPlaying = false;

  function formatTime(seconds: number): string {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = Math.floor(seconds % 60);
    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
  }

  function togglePlayPause() {
    if (!audio) {
      // Initialize audio with the provided audioUrl
      const audioPlayer = document.querySelector('div[data-audio-url]');
      const audioUrl = audioPlayer?.getAttribute('data-audio-url');
      audio = new Audio(audioUrl);
      audio.addEventListener('timeupdate', updateProgress);
      audio.addEventListener('loadedmetadata', () => {
        if (durationEl) durationEl.textContent = formatTime(audio!.duration);
      });
    }

    if (isPlaying) {
      audio.pause();
      playIcon?.classList.remove('hidden');
      pauseIcon?.classList.add('hidden');
    } else {
      audio.play();
      playIcon?.classList.add('hidden');
      pauseIcon?.classList.remove('hidden');
    }
    isPlaying = !isPlaying;
  }

  function updateProgress() {
    if (!audio) return;
    
    const progress = (audio.currentTime / audio.duration) * 100;
    if (progressBar) progressBar.style.width = `${progress}%`;
    if (seekBar) seekBar.value = progress.toString();
    if (currentTimeEl) currentTimeEl.textContent = formatTime(audio.currentTime);
  }

  function seek() {
    if (!audio || !seekBar) return;
    const time = (parseFloat(seekBar.value) / 100) * audio.duration;
    audio.currentTime = time;
  }

  playPauseBtn?.addEventListener('click', togglePlayPause);
  seekBar?.addEventListener('input', seek);
  volumeBtn?.addEventListener('click', () => {
    if (audio) {
      audio.muted = !audio.muted;
      volumeBtn.classList.toggle('text-primary');
    }
  });
</script>

<style>
  input[type="range"] {
    -webkit-appearance: none;
    appearance: none;
    background: transparent;
  }

  input[type="range"]::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 16px;
    height: 16px;
    background: var(--tw-prose-links);
    border-radius: 50%;
    cursor: pointer;
    margin-top: -7px;
  }

  input[type="range"]::-moz-range-thumb {
    width: 16px;
    height: 16px;
    background: var(--tw-prose-links);
    border-radius: 50%;
    cursor: pointer;
  }
</style>
