
---
interface Props {
  title: string;
  score: number;
  status: 'good' | 'warning' | 'alert';
  index: number;
  dueDate?: string;
  requirement: string;
}

const { title, score, status, index, dueDate, requirement } = Astro.props;

const statusColors = {
  good: 'bg-green-100 text-green-800',
  warning: 'bg-yellow-100 text-yellow-800',
  alert: 'bg-red-100 text-red-800'
};
---

<div 
  class="bg-white rounded-xl p-6 shadow-lg border border-gray-100 animate-slide-in"
  style={`animation-delay: ${index * 200}ms`}
>
  <div class="flex items-start justify-between mb-4">
    <div>
      <h3 class="font-medium text-gray-900 mb-1">{title}</h3>
      <p class="text-sm text-gray-600">{requirement}</p>
    </div>
    <div class="flex flex-col items-end">
      <span class={`px-3 py-1 rounded-full text-sm ${statusColors[status]}`}>
        {score}% Complete
      </span>
      {dueDate && (
        <span class="text-sm text-gray-500 mt-1">Due: {dueDate}</span>
      )}
    </div>
  </div>

  <div class="relative h-2 bg-gray-100 rounded-full overflow-hidden">
    <div 
      class={`absolute left-0 top-0 h-full rounded-full transition-all duration-1000 ease-out ${
        status === 'good' ? 'bg-green-500' :
        status === 'warning' ? 'bg-yellow-500' : 'bg-red-500'
      }`}
      style={`width: ${score}%`}
    >
      <div class="absolute inset-0 bg-white/20 animate-pulse"></div>
    </div>
  </div>
</div>

<style>
  @keyframes slideIn {
    from { 
      opacity: 0;
      transform: translateX(20px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  .animate-slide-in {
    opacity: 0;
    animation: slideIn 0.5s ease-out forwards;
  }
</style>
