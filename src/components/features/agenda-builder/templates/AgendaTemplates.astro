---
interface Props {
  templates: Array<{
    name: string;
    icon: string;
    items: Array<{
      title: string;
      type: string;
      duration: number;
    }>;
  }>;
}

const { templates } = Astro.props;
---

<div class="bg-white rounded-xl shadow-lg border border-gray-100 overflow-hidden">
  <div class="p-6 border-b border-gray-100 bg-gray-50">
    <h3 class="text-lg font-semibold text-gray-900">Agenda Templates</h3>
  </div>

  <div class="p-6">
    <div class="grid gap-6">
      {templates.map((template, index) => (
        <div 
          class="group relative bg-white rounded-lg border-2 border-gray-100 hover:border-primary/20 p-6 cursor-pointer transition-all duration-300 animate-fade-in"
          style={`animation-delay: ${index * 200}ms`}
        >
          <div class="flex items-start space-x-4">
            <div class="flex-shrink-0 w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center text-2xl group-hover:scale-110 transition-transform duration-300">
              {template.icon}
            </div>
            <div class="flex-grow">
              <h4 class="text-lg font-medium text-gray-900 mb-2 group-hover:text-primary transition-colors">
                {template.name}
              </h4>
              <div class="space-y-2">
                {template.items.map(item => (
                  <div class="flex items-center justify-between text-sm">
                    <span class="text-gray-600">{item.title}</span>
                    <span class="text-gray-500">{item.duration} min</span>
                  </div>
                ))}
              </div>
            </div>
            <div class="flex-shrink-0 text-primary opacity-0 group-hover:opacity-100 transition-opacity">
              <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
              </svg>
            </div>
          </div>

          <!-- Preview on Hover -->
          <div class="absolute inset-0 bg-gradient-to-r from-primary/5 to-transparent opacity-0 group-hover:opacity-100 transition-opacity rounded-lg -z-10"></div>
        </div>
      ))}
    </div>
  </div>
</div>

<style>
  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
  }

  .animate-fade-in {
    opacity: 0;
    animation: fadeIn 0.5s ease-out forwards;
  }
</style>
```