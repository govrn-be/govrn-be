---
interface Comment {
  id: string;
  author: {
    name: string;
    initials: string;
    color?: string;
  };
  content: string;
  timestamp: string;
  replies?: Comment[];
}

interface Props {
  comment: Comment;
  level?: number;
  texts?: {
    replyButton: string;
  };
}

const { comment, level = 0, texts = {
  replyButton: "Reply"
}} = Astro.props;
---

<div class={`${level > 0 ? 'ml-8 mt-3' : ''}`}>
  <div class="flex items-start space-x-3">
    <div class={`w-8 h-8 rounded-full bg-${comment.author.color || 'primary'}/10 flex items-center justify-center text-${comment.author.color || 'primary'}`}>
      {comment.author.initials}
    </div>
    <div class="flex-grow">
      <div class="bg-white rounded-lg p-3 shadow-sm border border-gray-100">
        <div class="flex items-center justify-between mb-2">
          <p class="text-sm font-medium text-gray-900">{comment.author.name}</p>
          <p class="text-xs text-gray-500">{comment.timestamp}</p>
        </div>
        <p class="text-sm text-gray-600">{comment.content}</p>
      </div>
      
      <!-- Reply Button -->
      <button class="text-sm text-primary hover:text-primary/90 font-medium mt-2">
        {texts.replyButton}
      </button>

      <!-- Nested Replies -->
      {comment.replies && (
        <div class="mt-3">
          {comment.replies.map(reply => (
            <Astro.self comment={reply} level={level + 1} texts={texts} />
          ))}
        </div>
      )}
    </div>
  </div>
</div>